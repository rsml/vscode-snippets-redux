{
   "redux action": {
      "prefix": "ac",
      "body": [
          "export function $1(value) {",
          "  return {",
          "      type: ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g},",
          "      value",
          "  }",
          "}"
      ]
   },
   
   "redux constant": {
      "prefix": "co",
      "body": [
          "export const ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g} = '${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}'"
      ]
   },
   
   "redux reducer": {
      "prefix": "re",
      "body": [
          "case ${1/([a-z]*)(([A-Z])+([a-z]+))?/${1:/upcase}${2:+_}$3${4:/upcase}/g}:",
          "return state",
          "  .set('${1/(set)([A-Z])(.*)/${2:/downcase}$3/}', action.value);"
      ]
   },

   "whatchanged": {
      "prefix": "whatchanged",
      "body": [
         "componentWillReceiveProps(nextProps) {",
         "   const changedProps = _.reduce(this.props, (result, value, key) => (_.isEqual(value, nextProps[key])",
         "     ? result",
         "     : result.concat(key)), []);",
         "",
         "  console.group(`${this.constructor.name} CHANGED PROPS`);",
         "  changedProps.forEach((changedProp) => {",
         "    console.group(`${changedProp}`);",
         "    console.group('OLD');",
         "    console.log(this.props[changedProp]);",
         "    console.groupEnd();",
         "    console.group('NEW');",
         "    console.log(nextProps[changedProp]);",
         "    console.groupEnd();",
         "    console.groupEnd();",
         "  });",
         "  console.groupEnd();",
         "}",
      ]
   }
}
